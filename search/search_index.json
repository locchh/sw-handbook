{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Software Handbook","text":"<p>A collection of notes about Software Engineering, Data and AI</p> <p>Welcome to my personal handbook where I document my learnings, insights, and references about software engineering, data science, and artificial intelligence. This handbook serves as both a personal reference and a resource for others interested in these fields.</p>"},{"location":"#whats-inside","title":"What's Inside","text":"<ul> <li>Software - Best practices, design patterns, architecture, and tools</li> <li>Data - Data engineering, databases, analytics, and visualization</li> <li>AI - Machine learning, deep learning, and AI applications</li> </ul>"},{"location":"#how-to-use-this-handbook","title":"How to Use This Handbook","text":"<p>This handbook is organized in a hierarchical structure. You can navigate through the sections using the navigation menu on the left. Each section contains multiple articles on specific topics.</p>"},{"location":"about/","title":"About This Handbook","text":"<p>This Software Engineering Handbook is my personal collection of notes, insights, and references about software engineering, data science, and artificial intelligence.</p>"},{"location":"about/#purpose","title":"Purpose","text":"<p>The main purposes of this handbook are:</p> <ol> <li>Personal Reference - A place to document my learnings and experiences</li> <li>Continuous Learning - Encouraging myself to keep learning and documenting</li> <li>Knowledge Sharing - Sharing knowledge with the community</li> </ol>"},{"location":"about/#design-philosophy","title":"Design Philosophy","text":"<p>This handbook follows a retro-style and simple design philosophy, focusing on content rather than flashy visuals. The key design principles are:</p> <ul> <li>Simplicity - Clean and minimalist design</li> <li>Readability - Easy to read and navigate</li> <li>Accessibility - Accessible to everyone</li> <li>Maintainability - Easy to update and maintain</li> </ul>"},{"location":"about/#contact","title":"Contact","text":"<p>Feel free to reach out to me at <code>locc7196@gmail.com</code> if you have any questions, suggestions, or just want to connect!</p>"},{"location":"ai/","title":"Artificial Intelligence","text":"<p>Welcome to the AI section of my handbook. This section covers various aspects of artificial intelligence, machine learning, deep learning, and their applications.</p>"},{"location":"ai/#topics","title":"Topics","text":"<ul> <li>Machine Learning - Supervised, unsupervised, and reinforcement learning, traditional AI.</li> <li>Deep Learning - Neural networks, CNN, RNN, transformers, and more.</li> <li>Natural Language Processing - Text analysis, sentiment analysis, and language models.</li> <li>Computer Vision - Image recognition, object detection, and image generation.</li> <li>AI Applications - Real-world applications and case studies.</li> </ul>"},{"location":"data/","title":"Data","text":"<p>Welcome to the Data section of my handbook. This section covers various aspects of data engineering, databases, analytics, and visualization.</p>"},{"location":"data/#topics","title":"Topics","text":"<ul> <li>Fundamentals - Overview of data, data types, data quality, and data privacy.</li> <li>Data Engineering - ETL processes, data pipelines, and data integration.</li> <li>Databases - SQL, NoSQL, Graph databases, and database design principles.</li> <li>Data Analytics - Statistical analysis, data mining, and exploratory data analysis.</li> <li>Data Visualization - Charts, dashboards, and visualization best practices.</li> <li>Big Data - Technologies and frameworks for processing large datasets.</li> </ul>"},{"location":"data/basics/introduction_to_data/","title":"Introduction to Data","text":"<p>Data is everywhere.</p>"},{"location":"data/basics/introduction_to_data/#what-is-data","title":"What is Data?","text":"<ul> <li>Derived from <code>datum</code>: given, fact.</li> <li>Valuable resource in this digital era.</li> </ul>"},{"location":"data/basics/introduction_to_data/#data-context","title":"Data context","text":"<p>Information that provides meaning to data - When the data was collected? - Where the data was collected? - How the data was collected? - Who collected the data? - Why the data was collected?</p> <p>These characteristics of data are called the metadata.</p>"},{"location":"data/basics/introduction_to_data/#type-of-data","title":"Type of data","text":"<p>Classification of data based on their structure: - Structured data - Semi-structured data - Unstructured data</p> <p>Classification of data based on their nature:  - Quantitative data - Qualitative data</p>"},{"location":"data/basics/introduction_to_data/#data-storage-is-changing","title":"Data storage is changing","text":"<p>Historical data storage - Genetic information in DNA. - Cave and wall paintings. - Scroll and books of papyrus/parchment.</p> <p>19th and 20th century - Punch cards. - Magnetic tape, floppy disks.</p> <p>20th and 21st century - More data on smaller media. - CDs and hard/solid state drives(local). - Data centers (cloud).</p>"},{"location":"data/basics/introduction_to_data/#the-dikw-pyramid","title":"The DIKW pyramid","text":"<pre><code>Data -&gt; Information -&gt; Knowledge -&gt; Wisdom\n</code></pre> <p>Raw data - unprocessed data.</p> <p>Creating information - Information is (organized) data with context.</p> <p>Knowledge is power: - Information alone doesn't lead to decisions. - Connecting all the dots of information. - Knowledge is information with meaning.</p> <p>Archiving wisdom - The hardest part - Insights: add more meaning to information by linking pieces. - Apply the knowledge for better decisions.</p>"},{"location":"data/basics/introduction_to_data/#from-data-to-decision","title":"From data to decision","text":"<pre><code>Ask questions -&gt; Gather data -&gt; Prepare data -&gt; Conduct Analysis -&gt; Make decision\n</code></pre>"},{"location":"data/basics/introduction_to_data/#data-as-a-resource","title":"Data as a resource","text":"<p>Overwhelming data</p> <ul> <li> <p>Data is often too large in its raw form. Even \"simple\" analysis require large amount of data.</p> </li> <li> <p>More complex analysis can leverage even million or billion of records.</p> </li> </ul> <p>Data aggregation</p> <p>Aggregation is the process to summarize a dataset into a smaller pieces (easier to understand) is required to make informed decisions.</p> <p>Common aggregation: - Simple average (mean) - Sum (totals) - Minimum or Maximum - Modes</p> <p>Aggregation appear in many ways throughout organizations. - Metrics - Benchmarks - Key performance indicators (KPIs)</p> <p>Understanding how these aggregations are created is extremely helpful for many investigations.</p>"},{"location":"data/basics/introduction_to_data/#key-concepts","title":"Key concepts","text":"<p>Data flow</p> <p>Data flow within organizations is often  highly complex.</p> <ul> <li>Data from many different sources systems</li> <li>Processed through other systems</li> <li>Displayed and manipulated in other systems.</li> </ul> <p>Data management Data management is responsible trying to unify and standardize data from many different data flows. These </p> <p>Data governance Ensure data is consistent, trustworthy, and isn't misused.</p> <p>Data quality Ensure data is accurate, complete, consistent, and up-to-date.</p> <p>Data Privacy and Security Ensure proper data access, use, and protection.</p>"},{"location":"data/basics/introduction_to_data/#principles-of-data-ethics","title":"Principles of data ethics","text":"<ul> <li>Permission for </li> <li>Transparency about the plan</li> <li>Privacy of data</li> <li>Good intentions</li> <li>Consider the outcome</li> </ul>"},{"location":"data/basics/introduction_to_data/#data-lifecycle","title":"Data lifecycle","text":"<pre><code>Planning -&gt; Collection -&gt; Storage -&gt; Management -&gt; Cleaning and processing -&gt; Analysis and Visualization -&gt; Sharing -&gt; Archiving/destroying\n</code></pre>"},{"location":"data/basics/introduction_to_data/#common-mistakes-about-data","title":"Common mistakes about data","text":"<ul> <li>Not having a clear goal or question</li> <li>Insufficient or wrong data (data bias, dirty data,etc.)</li> <li>Lack of appropriate analysis (lack of context, wrong metrics,etc.)</li> <li>No clear communication of results</li> </ul>"},{"location":"software/","title":"Software Engineering","text":"<p>Welcome to the Software Engineering section of my handbook. This section covers various aspects of software development, best practices, design patterns, and tools.</p>"},{"location":"software/#topics","title":"Topics","text":"<ul> <li>Design Patterns - Common solutions to recurring problems in software design.</li> <li>Architecture - System design, microservices, monoliths, and more.</li> <li>Development Practices - TDD, BDD, CI/CD, and other methodologies.</li> <li>Languages &amp; Frameworks - Notes on programming languages and frameworks.</li> <li>Tools &amp; Utilities - Development tools, IDEs, and productivity enhancers.</li> </ul>"},{"location":"software/basics/basic_concepts/","title":"Basic Software Engineering Concepts","text":""},{"location":"software/basics/basic_concepts/#chomsky-hierarchy","title":"Chomsky Hierarchy","text":"<p>The Chomsky Hierarchy is a classification of formal grammars (and the languages they generate) into four types, organized from the most general (most expressive) to the most restricted (least expressive).</p> <p>It\u2019s a core concept in formal language theory, automata theory, and compiler design \u2014 originally introduced by Noam Chomsky in 1956 to describe the structure of natural languages but now widely used in computer science.</p>"},{"location":"software/basics/basic_concepts/#the-four-levels-of-the-chomsky-hierarchy","title":"The Four Levels of the Chomsky Hierarchy","text":"Type Grammar Name Language Class Equivalent Automaton Rules / Restrictions Type 0 Unrestricted grammar Recursively enumerable languages Turing Machine No restrictions on productions: \u03b1 \u2192 \u03b2, where \u03b1 and \u03b2 are any strings of terminals/nonterminals and \u03b1 \u2260 \u03b5. Type 1 Context-sensitive grammar Context-sensitive languages Linear bounded automaton (Turing machine with tape limited to input length) Productions of the form \u03b1A\u03b2 \u2192 \u03b1\u03b3\u03b2, where \u03b3 \u2260 \u03b5 (length of output \u2265 length of input) Type 2 Context-free grammar (CFG) Context-free languages Pushdown Automaton (PDA) Productions of the form A \u2192 \u03b3, where A is a single nonterminal Type 3 Regular grammar Regular languages Finite State Automaton (FSA) Productions of the form A \u2192 aB or A \u2192 a (right-linear or left-linear)"},{"location":"software/basics/basic_concepts/#why-it-matters","title":"Why It Matters","text":"<ul> <li> <p>Compiler design:</p> </li> <li> <p>Regular languages \u2192 Lexical analysis (regex, tokenizing)</p> </li> <li>Context-free languages \u2192 Syntax analysis (parsing)</li> <li>Theoretical computer science: Helps in classifying computational problems by their complexity.</li> <li>Natural language processing: Models grammatical structures of human languages.</li> </ul>"},{"location":"software/basics/basic_concepts/#example-of-restrictions","title":"Example of Restrictions","text":"<p>Let\u2019s see an example where a grammar moves down the hierarchy:</p> <ol> <li>Type 0:</li> </ol> <pre><code>S \u2192 aSb | \u03b5\n</code></pre> <p>(No restrictions \u2014 works fine in Type 0 and all below if it matches the form.)</p> <ol> <li>Type 1: Must be length non-decreasing:</li> </ol> <pre><code>AB \u2192 AC  \nC \u2192 b\n</code></pre> <ol> <li>Type 2: Only single nonterminal on LHS:</li> </ol> <pre><code>S \u2192 aSb | \u03b5\n</code></pre> <ol> <li>Type 3: Only one terminal on RHS and at most one nonterminal:</li> </ol> <pre><code>S \u2192 aA  \nA \u2192 bS | \u03b5\n</code></pre>"},{"location":"software/basics/basic_concepts/#programming-paradigms","title":"Programming Paradigms","text":"<p>Programming paradigms are fundamental styles or approaches to programming that shape how solutions are designed and implemented. Below are some of the major paradigms:</p>"},{"location":"software/basics/basic_concepts/#1-object-oriented-programming-oop","title":"1. Object-Oriented Programming (OOP)","text":"<p>Key Concepts: Objects, Classes, Inheritance, Encapsulation, Polymorphism Languages: Java, C++, Python, C#, Ruby Description: OOP organizes code around objects, which are instances of classes\u2014blueprints that define attributes and behaviors. It promotes code reuse, modularity, and scalability, making it ideal for large and complex software systems.</p>"},{"location":"software/basics/basic_concepts/#2-functional-programming-fp","title":"2. Functional Programming (FP)","text":"<p>Key Concepts: Pure Functions, Immutability, First-Class Functions, Higher-Order Functions Languages: Haskell, Lisp, Elixir, Scala, JavaScript (partial) Description: FP emphasizes declarative code using pure functions and avoids mutable state and side effects. It\u2019s rooted in mathematical functions and is well-suited for concurrent and parallel programming.</p>"},{"location":"software/basics/basic_concepts/#3-procedural-programming-pp","title":"3. Procedural Programming (PP)","text":"<p>Key Concepts: Procedures (Functions), Sequence, Selection, Iteration Languages: C, Pascal, Fortran, BASIC Description: Procedural programming structures programs as a series of instructions grouped into procedures or routines. It is a subset of imperative programming and is suitable for applications with a clear step-by-step logic.</p>"},{"location":"software/basics/basic_concepts/#4-declarative-programming-dp","title":"4. Declarative Programming (DP)","text":"<p>Key Concepts: What to Do (Not How), Abstraction, Constraints Languages: SQL, HTML, Prolog, Haskell Description: Declarative programming expresses the logic of computation without describing its control flow. The focus is on what the program should accomplish rather than detailing how to achieve it.</p>"},{"location":"software/basics/basic_concepts/#5-logic-programming-lp","title":"5. Logic Programming (LP)","text":"<p>Key Concepts: Facts, Rules, Queries, Inference Languages: Prolog, Datalog Description: Logic programming is based on formal logic. Programs consist of a set of facts and rules, and computation is performed through logical inference. It is widely used in AI, natural language processing, and expert systems.</p>"},{"location":"software/basics/basic_concepts/#code-component-levels","title":"Code Component Levels","text":""},{"location":"software/basics/basic_concepts/#1-expression-statement","title":"1. Expression / Statement","text":"<p>Description: The most basic unit of code that performs an action or produces a value. Examples:</p> <pre><code>x = 5         # Statement  \ny = x + 2     # Expression within a statement\n</code></pre>"},{"location":"software/basics/basic_concepts/#2-function","title":"2. Function","text":"<p>Description: A reusable block of code designed to perform a specific task, often with inputs (parameters) and outputs (return values). Example:</p> <pre><code>def add(a, b):\n    return a + b\n</code></pre>"},{"location":"software/basics/basic_concepts/#3-class","title":"3. Class","text":"<p>Description: A blueprint for creating objects. Classes group related data and methods (functions) together, supporting object-oriented design. Example:</p> <pre><code>class Calculator:\n    def add(self, a, b):\n        return a + b\n</code></pre>"},{"location":"software/basics/basic_concepts/#4-file","title":"4. File","text":"<p>Description: A physical file (e.g., <code>.py</code>, <code>.js</code>) containing source code, which may include multiple functions, classes, or even runnable scripts. Example: <code>calculator.py</code> might contain all calculator-related classes and functions.</p>"},{"location":"software/basics/basic_concepts/#5-module","title":"5. Module","text":"<p>Description: A file or collection of files that define a namespace and can be imported into other files. Modules allow encapsulation and reuse. Example:</p> <pre><code>import math\nfrom calculator import add\n</code></pre>"},{"location":"software/basics/basic_concepts/#6-package","title":"6. Package","text":"<p>Description: A collection of related modules organized in a directory with an optional <code>__init__.py</code> file. Packages help group functionality logically. Example: <code>numpy</code>, <code>scikit-learn</code>, or your own directory like <code>myutils/</code></p>"},{"location":"software/basics/basic_concepts/#7-project","title":"7. Project","text":"<p>Description: A complete application or system that may consist of multiple packages, configurations, tests, and documentation. Example: A Django web app or a machine learning pipeline.</p>"},{"location":"software/basics/basic_concepts/#8-platform","title":"8. Platform","text":"<p>Description: A larger ecosystem or environment where projects are deployed, integrated, or distributed. May include OS, runtime environments, SDKs, or cloud infrastructure.</p>"},{"location":"software/basics/basic_concepts/#layers-in-software-architecture","title":"Layers in Software Architecture","text":"<p>Software systems are often organized into logical layers, each responsible for a specific concern. This separation helps manage complexity, supports scalability, and improves testability.</p>"},{"location":"software/basics/basic_concepts/#1-data-layer-persistence-layer","title":"1. Data Layer (Persistence Layer)","text":"<p>Responsibility: Manages storage, retrieval, and manipulation of data from databases, file systems, or external APIs. Key Components:</p> <ul> <li>Database access (SQL, ORM)</li> <li>Data models / entities</li> <li>Repositories / DAOs   Examples:</li> <li>PostgreSQL, MongoDB</li> <li>SQLAlchemy, Hibernate</li> <li><code>UserRepository</code>, <code>ProductDAO</code></li> </ul>"},{"location":"software/basics/basic_concepts/#2-application-business-layer-service-layer","title":"2. Application / Business Layer (Service Layer)","text":"<p>Responsibility: Implements business logic and rules. It coordinates between the data and presentation layers, encapsulating core operations of the application. Key Components:</p> <ul> <li>Services</li> <li>Use cases</li> <li>Domain logic   Examples:</li> <li><code>OrderService</code>, <code>AuthManager</code></li> <li>Validating input, calculating discounts, enforcing rules</li> </ul>"},{"location":"software/basics/basic_concepts/#3-presentation-layer-ui-layer","title":"3. Presentation Layer (UI Layer)","text":"<p>Responsibility: Handles user interaction and displays output. This layer communicates with the application layer to send input and present results. Key Components:</p> <ul> <li>Web or mobile UI</li> <li>Controllers / ViewModels</li> <li>Frontend frameworks   Examples:</li> <li>HTML, React, Flutter</li> <li><code>LoginController</code>, <code>DashboardPage</code></li> </ul>"},{"location":"software/basics/basic_concepts/#optional-extensions","title":"Optional Extensions","text":"<p>If you're interested in a more complex architecture (like enterprise systems), you might also include:</p> <ul> <li>API Layer: For REST/GraphQL endpoints that expose services to clients.</li> <li>Integration Layer: Manages communication with external systems and services (e.g., third-party APIs).</li> <li>Security Layer: Handles authentication, authorization, and encryption across layers.</li> </ul>"},{"location":"software/basics/basic_concepts/#some-popular-software-applications","title":"Some Popular Software Applications","text":""},{"location":"software/basics/basic_concepts/#1-web-application","title":"1. Web Application","text":""},{"location":"software/basics/basic_concepts/#2-mobile-application","title":"2. Mobile Application","text":""},{"location":"software/basics/basic_concepts/#3-desktop-application","title":"3. Desktop Application","text":""},{"location":"software/basics/basic_concepts/#4-console-application","title":"4. Console Application","text":""},{"location":"software/basics/basic_concepts/#5-development-framework-library","title":"5. Development Framework, Library","text":""},{"location":"software/basics/basic_concepts/#6-development-tool","title":"6. Development Tool","text":""}]}