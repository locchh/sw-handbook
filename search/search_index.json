{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Software Handbook","text":"<p>A collection of notes about Software Engineering, Data and AI</p> <p>Welcome to my personal handbook where I document my learnings, insights, and references about software engineering, data science, and artificial intelligence. This handbook serves as both a personal reference and a resource for others interested in these fields.</p>"},{"location":"#whats-inside","title":"What's Inside","text":"<ul> <li>Software - Best practices, design patterns, architecture, and tools</li> <li>Data - Data engineering, databases, analytics, and visualization</li> <li>AI - Machine learning, deep learning, and AI applications</li> </ul>"},{"location":"#how-to-use-this-handbook","title":"How to Use This Handbook","text":"<p>This handbook is organized in a hierarchical structure. You can navigate through the sections using the navigation menu on the left. Each section contains multiple articles on specific topics.</p>"},{"location":"about/","title":"About This Handbook","text":"<p>This Software Engineering Handbook is my personal collection of notes, insights, and references about software engineering, data science, and artificial intelligence.</p>"},{"location":"about/#purpose","title":"Purpose","text":"<p>The main purposes of this handbook are:</p> <ol> <li>Personal Reference - A place to document my learnings and experiences</li> <li>Continuous Learning - Encouraging myself to keep learning and documenting</li> <li>Knowledge Sharing - Sharing knowledge with the community</li> </ol>"},{"location":"about/#design-philosophy","title":"Design Philosophy","text":"<p>This handbook follows a retro-style and simple design philosophy, focusing on content rather than flashy visuals. The key design principles are:</p> <ul> <li>Simplicity - Clean and minimalist design</li> <li>Readability - Easy to read and navigate</li> <li>Accessibility - Accessible to everyone</li> <li>Maintainability - Easy to update and maintain</li> </ul>"},{"location":"about/#contact","title":"Contact","text":"<p>Feel free to reach out to me at <code>locc7196@gmail.com</code> if you have any questions, suggestions, or just want to connect!</p>"},{"location":"ai/","title":"Artificial Intelligence","text":"<p>Welcome to the AI section of my handbook. This section covers various aspects of artificial intelligence, machine learning, deep learning, and their applications.</p>"},{"location":"ai/#topics","title":"Topics","text":"<ul> <li>Machine Learning - Supervised, unsupervised, and reinforcement learning, traditional AI.</li> <li>Deep Learning - Neural networks, CNN, RNN, transformers, and more.</li> <li>Natural Language Processing - Text analysis, sentiment analysis, and language models.</li> <li>Computer Vision - Image recognition, object detection, and image generation.</li> <li>AI Applications - Real-world applications and case studies.</li> </ul>"},{"location":"ai/basics/concepts/","title":"AI Concepts","text":""},{"location":"ai/basics/concepts/#solution-types","title":"Solution Types","text":""},{"location":"ai/basics/concepts/#rule-based","title":"Rule-based","text":"<p>There are hidden rules in every system. Rules to govern the sentences we write, the software we code and the music we play.</p>"},{"location":"ai/basics/concepts/#statistical","title":"Statistical","text":""},{"location":"ai/basics/concepts/#machine-learning","title":"Machine Learning","text":"<ul> <li>Supervised Learning</li> <li>Unsupervised Learning</li> <li>Reinforcement Learning</li> </ul>"},{"location":"ai/basics/concepts/#deep-learning","title":"Deep Learning","text":""},{"location":"ai/basics/concepts/#generative-ai","title":"Generative AI","text":"<ul> <li>Large Language Model (LLM)</li> <li>Multi-modal LLM</li> </ul>"},{"location":"ai/basics/concepts/#ai-agents","title":"AI Agents","text":""},{"location":"data/","title":"Data","text":"<p>Welcome to the Data section of my handbook. This section covers various aspects of data engineering, databases, analytics, and visualization.</p>"},{"location":"data/#topics","title":"Topics","text":"<ul> <li>Fundamentals - Overview of data, data types, data quality, and data privacy.</li> <li>Data Engineering - ETL processes, data pipelines, and data integration.</li> <li>Databases - SQL, NoSQL, Graph databases, and database design principles.</li> <li>Data Analytics - Statistical analysis, data mining, and exploratory data analysis.</li> <li>Data Visualization - Charts, dashboards, and visualization best practices.</li> <li>Big Data - Technologies and frameworks for processing large datasets.</li> </ul>"},{"location":"data/basics/introduction_to_data/","title":"Introduction to Data","text":"<p>Data is everywhere.</p>"},{"location":"data/basics/introduction_to_data/#what-is-data","title":"What is Data?","text":"<ul> <li>Derived from <code>datum</code>: given, fact.</li> <li>Valuable resource in this digital era.</li> </ul>"},{"location":"data/basics/introduction_to_data/#data-context","title":"Data context","text":"<p>Everything can be the context, but which ones are prior?</p> <p>Information that provides meaning to data</p> <ul> <li> <p>When the data was collected?</p> </li> <li> <p>Where the data was collected?</p> </li> <li> <p>How the data was collected?</p> </li> <li> <p>Who collected the data?</p> </li> <li> <p>Why the data was collected?</p> </li> </ul> <p>These characteristics of data are called the metadata.</p>"},{"location":"data/basics/introduction_to_data/#type-of-data","title":"Type of data","text":"<p>Classification of data based on their structure:</p> <ul> <li> <p>Structured data (If there are rules, then there must be some form of structure)</p> </li> <li> <p>Semi-structured data</p> </li> <li> <p>Unstructured data</p> </li> </ul> <p>Classification of data based on their nature: </p> <ul> <li> <p>Quantitative data</p> </li> <li> <p>Qualitative data</p> </li> </ul>"},{"location":"data/basics/introduction_to_data/#data-storage-is-changing","title":"Data storage is changing","text":"<p>Historical data storage - Genetic information in DNA. - Cave and wall paintings. - Scroll and books of papyrus/parchment.</p> <p>19th and 20th century - Punch cards. - Magnetic tape, floppy disks.</p> <p>20th and 21st century - More data on smaller media. - CDs and hard/solid state drives(local). - Data centers (cloud).</p>"},{"location":"data/basics/introduction_to_data/#the-dikw-pyramid","title":"The DIKW pyramid","text":"<pre><code>Data -&gt; Information -&gt; Knowledge -&gt; Wisdom\n</code></pre> <p>Raw data - unprocessed data.</p> <p>Creating information - Information is (organized) data with context.</p> <p>Knowledge is power: - Information alone doesn't lead to decisions. - Connecting all the dots of information. - Knowledge is information with meaning.</p> <p>Archiving wisdom - The hardest part - Insights: add more meaning to information by linking pieces. - Apply the knowledge for better decisions.</p>"},{"location":"data/basics/introduction_to_data/#from-data-to-decision","title":"From data to decision","text":"<pre><code>Ask questions -&gt; Gather data -&gt; Prepare data -&gt; Conduct Analysis -&gt; Make decision\n</code></pre>"},{"location":"data/basics/introduction_to_data/#data-as-a-resource","title":"Data as a resource","text":"<p>Overwhelming data</p> <ul> <li> <p>Data is often too large in its raw form. Even \"simple\" analysis require large amount of data.</p> </li> <li> <p>More complex analysis can leverage even million or billion of records.</p> </li> </ul> <p>Data aggregation</p> <p>Aggregation is the process to summarize a dataset into a smaller pieces (easier to understand) is required to make informed decisions.</p> <p>Common aggregation: - Simple average (mean) - Sum (totals) - Minimum or Maximum - Modes</p> <p>Aggregation appear in many ways throughout organizations. - Metrics - Benchmarks - Key performance indicators (KPIs)</p> <p>Understanding how these aggregations are created is extremely helpful for many investigations.</p>"},{"location":"data/basics/introduction_to_data/#key-concepts","title":"Key concepts","text":"<p>Data flow</p> <p>Data flow within organizations is often  highly complex.</p> <ul> <li>Data from many different sources systems</li> <li>Processed through other systems</li> <li>Displayed and manipulated in other systems.</li> </ul> <p>Data management Data management is responsible trying to unify and standardize data from many different data flows. These </p> <p>Data governance Ensure data is consistent, trustworthy, and isn't misused.</p> <p>Data quality Ensure data is accurate, complete, consistent, and up-to-date.</p> <p>Data Privacy and Security Ensure proper data access, use, and protection.</p>"},{"location":"data/basics/introduction_to_data/#principles-of-data-ethics","title":"Principles of data ethics","text":"<ul> <li>Permission for </li> <li>Transparency about the plan</li> <li>Privacy of data</li> <li>Good intentions</li> <li>Consider the outcome</li> </ul>"},{"location":"data/basics/introduction_to_data/#data-lifecycle","title":"Data lifecycle","text":"<pre><code>Planning -&gt; Collection -&gt; Storage -&gt; Management -&gt; Cleaning and processing -&gt; Analysis and Visualization -&gt; Sharing -&gt; Archiving/destroying\n</code></pre>"},{"location":"data/basics/introduction_to_data/#common-mistakes-about-data","title":"Common mistakes about data","text":"<ul> <li>Not having a clear goal or question</li> <li>Insufficient or wrong data (data bias, dirty data,etc.)</li> <li>Lack of appropriate analysis (lack of context, wrong metrics,etc.)</li> <li>No clear communication of results</li> </ul>"},{"location":"software/","title":"Software Engineering","text":"<p>Welcome to the Software Engineering section of my handbook. This section covers various aspects of software development, best practices, design patterns, and tools.</p>"},{"location":"software/#topics","title":"Topics","text":"<ul> <li>Design Patterns - Common solutions to recurring problems in software design.</li> <li>Architecture - System design, microservices, monoliths, and more.</li> <li>Development Practices - TDD, BDD, CI/CD, and other methodologies.</li> <li>Languages &amp; Frameworks - Notes on programming languages and frameworks.</li> <li>Tools &amp; Utilities - Development tools, IDEs, and productivity enhancers.</li> </ul>"},{"location":"software/basics/abbreviations/","title":"Abbreviations","text":"<p>HTTP: HyperText Transfer Protocol</p> <p>HTTPS: HyperText Transfer Protocol Secure (HTTP over TLS/SSL)</p> <p>FTP: File Transfer Protocol</p> <p>FTPS: FTP over TLS/SSL (different from SFTP)</p> <p>SFTP: SSH File Transfer Protocol (runs over SSH; not \"Secure FTP\")</p> <p>SSH: Secure Shell</p> <p>SSL: Secure Sockets Layer</p> <p>TLS: Transport Layer Security</p> <p>SMTP: Simple Mail Transfer Protocol</p> <p>IMAP: Internet Message Access Protocol</p> <p>POP3: Post Office Protocol version 3</p> <p>DNS: Domain Name System</p> <p>URL: Uniform Resource Locator</p> <p>URI: Uniform Resource Identifier</p> <p>UUID: Universally Unique Identifier</p> <p>UTC: Coordinated Universal Time</p> <p>DOM: Document Object Model</p> <p>REST: Representational State Transfer (HTTP-based architectural style)</p> <p>SOAP: Simple Object Access Protocol (XML-based messaging protocol)</p> <p>gRPC: Google Remote Procedure Call</p> <p>JSON: JavaScript Object Notation</p> <p>YAML: YAML Ain't Markup Language (human-friendly data serialization)</p> <p>XML: eXtensible Markup Language</p> <p>CSV: Comma-Separated Values</p> <p>TSV: Tab-Separated Values</p> <p>HTML: HyperText Markup Language (web page structure)</p> <p>CSS: Cascading Style Sheets (web page styling)</p> <p>JS: JavaScript (web page behavior)</p> <p>SSR: Server-Side Rendering (web app with server-side rendering)</p> <p>SPA: Single-Page Application (web app with client-side routing)</p> <p>MPA: Multi-Page Application (web app with server-side routing)</p> <p>PWA: Progressive Web App</p> <p>CORS: Cross-Origin Resource Sharing</p> <p>CSRF: Cross-Site Request Forgery</p> <p>OAuth 2.0: Authorization framework for delegated access</p> <p>OIDC: OpenID Connect (authentication on top of OAuth 2.0)</p> <p>JWT: JSON Web Token (compact claims-based token)</p> <p>IP: Internet Protocol</p> <p>TCP: Transmission Control Protocol</p> <p>UDP: User Datagram Protocol</p> <p>CDN: Content Delivery Network</p> <p>POC: Proof of Concept</p> <p>MVP: Minimum Viable Product</p> <p>NAT: Network Address Translation</p> <p>MFA: Multi-Factor Authentication</p> <p>ISP: Internet Service Provider</p> <p>ORM: Object\u2013Relational Mapping (It\u2019s a technique lets you interact with a relational database using objects)</p> <p>API: Application Programming Interface</p> <p>CLI: Command Line Interface</p> <p>GUI: Graphical User Interface</p> <p>IDE: Integrated Development Environment</p> <p>RPC: Remote Procedure Call</p> <p>MVC: Model-View-Controller</p> <p>SaaS: Software as a Service</p> <p>IaaS: Infrastructure as a Service</p> <p>PaaS: Platform as a Service</p> <p>CI/CD: Continuous Integration/Continuous Deployment</p> <p>BD: Basic Design</p> <p>DD: Detailed Design</p> <p>SD: System Design</p> <p>DB: Database</p> <p>RDB: Relational Database</p> <p>RDBMS: Relational Database Management System</p> <p>ACID: Atomicity, Consistency, Isolation, Durability</p> <p>SDLC: Software Development Life Cycle</p> <p>SRS: Software Requirements Specification</p>"},{"location":"software/basics/basic_concepts/","title":"Basic Software Engineering Concepts","text":""},{"location":"software/basics/basic_concepts/#chomsky-hierarchy","title":"Chomsky Hierarchy","text":"<p>The Chomsky Hierarchy is a classification of formal grammars (and the languages they generate) into four types, organized from the most general (most expressive) to the most restricted (least expressive).</p> <p>It\u2019s a core concept in formal language theory, automata theory, and compiler design \u2014 originally introduced by Noam Chomsky in 1956 to describe the structure of natural languages but now widely used in computer science.</p>"},{"location":"software/basics/basic_concepts/#the-four-levels-of-the-chomsky-hierarchy","title":"The Four Levels of the Chomsky Hierarchy","text":"Type Grammar Name Language Class Equivalent Automaton Rules / Restrictions Type 0 Unrestricted grammar Recursively enumerable languages Turing Machine No restrictions on productions: \u03b1 \u2192 \u03b2, where \u03b1 and \u03b2 are any strings of terminals/nonterminals and \u03b1 \u2260 \u03b5. Type 1 Context-sensitive grammar Context-sensitive languages Linear bounded automaton (Turing machine with tape limited to input length) Productions of the form \u03b1A\u03b2 \u2192 \u03b1\u03b3\u03b2, where \u03b3 \u2260 \u03b5 (length of output \u2265 length of input) Type 2 Context-free grammar (CFG) Context-free languages Pushdown Automaton (PDA) Productions of the form A \u2192 \u03b3, where A is a single nonterminal Type 3 Regular grammar Regular languages Finite State Automaton (FSA) Productions of the form A \u2192 aB or A \u2192 a (right-linear or left-linear)"},{"location":"software/basics/basic_concepts/#why-it-matters","title":"Why It Matters","text":"<ul> <li> <p>Compiler design:</p> </li> <li> <p>Regular languages \u2192 Lexical analysis (regex, tokenizing)</p> </li> <li>Context-free languages \u2192 Syntax analysis (parsing)</li> <li>Theoretical computer science: Helps in classifying computational problems by their complexity.</li> <li>Natural language processing: Models grammatical structures of human languages.</li> </ul>"},{"location":"software/basics/basic_concepts/#example-of-restrictions","title":"Example of Restrictions","text":"<p>Let\u2019s see an example where a grammar moves down the hierarchy:</p> <ol> <li>Type 0:</li> </ol> <pre><code>S \u2192 aSb | \u03b5\n</code></pre> <p>(No restrictions \u2014 works fine in Type 0 and all below if it matches the form.)</p> <ol> <li>Type 1: Must be length non-decreasing:</li> </ol> <pre><code>AB \u2192 AC  \nC \u2192 b\n</code></pre> <ol> <li>Type 2: Only single nonterminal on LHS:</li> </ol> <pre><code>S \u2192 aSb | \u03b5\n</code></pre> <ol> <li>Type 3: Only one terminal on RHS and at most one nonterminal:</li> </ol> <pre><code>S \u2192 aA  \nA \u2192 bS | \u03b5\n</code></pre>"},{"location":"software/basics/basic_concepts/#programming-paradigms","title":"Programming Paradigms","text":"<p>Programming paradigms are fundamental styles or approaches to programming that shape how solutions are designed and implemented. Below are some of the major paradigms:</p>"},{"location":"software/basics/basic_concepts/#1-object-oriented-programming-oop","title":"1. Object-Oriented Programming (OOP)","text":"<p>Key Concepts: Objects, Classes, Inheritance, Encapsulation, Polymorphism Languages: Java, C++, Python, C#, Ruby Description: OOP organizes code around objects, which are instances of classes\u2014blueprints that define attributes and behaviors. It promotes code reuse, modularity, and scalability, making it ideal for large and complex software systems.</p>"},{"location":"software/basics/basic_concepts/#2-functional-programming-fp","title":"2. Functional Programming (FP)","text":"<p>Key Concepts: Pure Functions, Immutability, First-Class Functions, Higher-Order Functions Languages: Haskell, Lisp, Elixir, Scala, JavaScript (partial) Description: FP emphasizes declarative code using pure functions and avoids mutable state and side effects. It\u2019s rooted in mathematical functions and is well-suited for concurrent and parallel programming.</p>"},{"location":"software/basics/basic_concepts/#3-procedural-programming-pp","title":"3. Procedural Programming (PP)","text":"<p>Key Concepts: Procedures (Functions), Sequence, Selection, Iteration Languages: C, Pascal, Fortran, BASIC Description: Procedural programming structures programs as a series of instructions grouped into procedures or routines. It is a subset of imperative programming and is suitable for applications with a clear step-by-step logic.</p>"},{"location":"software/basics/basic_concepts/#4-declarative-programming-dp","title":"4. Declarative Programming (DP)","text":"<p>Key Concepts: What to Do (Not How), Abstraction, Constraints Languages: SQL, HTML, Prolog, Haskell Description: Declarative programming expresses the logic of computation without describing its control flow. The focus is on what the program should accomplish rather than detailing how to achieve it.</p>"},{"location":"software/basics/basic_concepts/#5-logic-programming-lp","title":"5. Logic Programming (LP)","text":"<p>Key Concepts: Facts, Rules, Queries, Inference Languages: Prolog, Datalog Description: Logic programming is based on formal logic. Programs consist of a set of facts and rules, and computation is performed through logical inference. It is widely used in AI, natural language processing, and expert systems.</p>"},{"location":"software/basics/basic_concepts/#code-component-levels","title":"Code Component Levels","text":""},{"location":"software/basics/basic_concepts/#1-expression-statement","title":"1. Expression / Statement","text":"<p>Description: The most basic unit of code that performs an action or produces a value. Examples:</p> <pre><code>x = 5         # Statement  \ny = x + 2     # Expression within a statement\n</code></pre>"},{"location":"software/basics/basic_concepts/#2-function","title":"2. Function","text":"<p>Description: A reusable block of code designed to perform a specific task, often with inputs (parameters) and outputs (return values). Example:</p> <pre><code>def add(a, b):\n    return a + b\n</code></pre>"},{"location":"software/basics/basic_concepts/#3-class","title":"3. Class","text":"<p>Description: A blueprint for creating objects. Classes group related data and methods (functions) together, supporting object-oriented design. Example:</p> <pre><code>class Calculator:\n    def add(self, a, b):\n        return a + b\n</code></pre>"},{"location":"software/basics/basic_concepts/#4-file","title":"4. File","text":"<p>Description: A physical file (e.g., <code>.py</code>, <code>.js</code>) containing source code, which may include multiple functions, classes, or even runnable scripts. Example: <code>calculator.py</code> might contain all calculator-related classes and functions.</p>"},{"location":"software/basics/basic_concepts/#5-module","title":"5. Module","text":"<p>Description: A file or collection of files that define a namespace and can be imported into other files. Modules allow encapsulation and reuse. Example:</p> <pre><code>import math\nfrom calculator import add\n</code></pre>"},{"location":"software/basics/basic_concepts/#6-sub-package-name-space-package","title":"6. Sub-package, Name-space package","text":"<p>Description: A sub-package is a package contained within another package (a nested directory structure). It helps organize larger packages into logical groups, e.g., <code>utils/text/</code> under <code>utils/</code>.</p> <p>A namespace package is a logical package that can be spread across multiple directories on <code>sys.path</code> (in Python, enabled by PEP 420). Unlike regular packages, a namespace package may not have a single <code>__init__.py</code> file and can be extended by separate distributions. Examples:</p> <p>Regular package with sub-packages:</p> <pre><code>myapp/\n  utils/\n    __init__.py\n    text/\n      __init__.py\n      tokenize.py\n    math/\n      __init__.py\n      stats.py\n</code></pre> <pre><code>from myapp.utils.text import tokenize\n</code></pre> <p>Namespace package (pieces located in multiple roots on sys.path):</p> <pre><code>/src/pkg_a/acme/plugins/foo.py\n/src/pkg_b/acme/plugins/bar.py\n</code></pre> <pre><code># When both /src/pkg_a and /src/pkg_b are on sys.path\nfrom acme.plugins import foo, bar\n</code></pre>"},{"location":"software/basics/basic_concepts/#7-package","title":"7. Package","text":"<p>Description: A collection of related modules organized in a directory with an optional <code>__init__.py</code> file. Packages help group functionality logically. Example: <code>numpy</code>, <code>scikit-learn</code>, or your own directory like <code>myutils/</code></p>"},{"location":"software/basics/basic_concepts/#8-project","title":"8. Project","text":"<p>Description: A complete application or system that may consist of multiple packages, configurations, tests, and documentation. Example: A Django web app or a machine learning pipeline.</p>"},{"location":"software/basics/basic_concepts/#9-platform","title":"9. Platform","text":"<p>Description: A larger ecosystem or environment where projects are deployed, integrated, or distributed. May include OS, runtime environments, SDKs, or cloud infrastructure.</p>"},{"location":"software/basics/basic_concepts/#layers-in-software-architecture","title":"Layers in Software Architecture","text":"<p>Software systems are often organized into logical layers, each responsible for a specific concern. This separation helps manage complexity, supports scalability, and improves testability.</p>"},{"location":"software/basics/basic_concepts/#1-data-layer-persistence-layer","title":"1. Data Layer (Persistence Layer)","text":"<p>Responsibility: Manages storage, retrieval, and manipulation of data from databases, file systems, or external APIs. Key Components:</p> <ul> <li>Database access (SQL, ORM)</li> <li>Data models / entities</li> <li>Repositories / DAOs   Examples:</li> <li>PostgreSQL, MongoDB</li> <li>SQLAlchemy, Hibernate</li> <li><code>UserRepository</code>, <code>ProductDAO</code></li> </ul>"},{"location":"software/basics/basic_concepts/#2-application-business-layer-service-layer","title":"2. Application / Business Layer (Service Layer)","text":"<p>Responsibility: Implements business logic and rules. It coordinates between the data and presentation layers, encapsulating core operations of the application. Key Components:</p> <ul> <li>Services</li> <li>Use cases</li> <li>Domain logic   Examples:</li> <li><code>OrderService</code>, <code>AuthManager</code></li> <li>Validating input, calculating discounts, enforcing rules</li> </ul>"},{"location":"software/basics/basic_concepts/#3-presentation-layer-ui-layer","title":"3. Presentation Layer (UI Layer)","text":"<p>Responsibility: Handles user interaction and displays output. This layer communicates with the application layer to send input and present results. Key Components:</p> <ul> <li>Web or mobile UI</li> <li>Controllers / ViewModels</li> <li>Frontend frameworks   Examples:</li> <li>HTML, React, Flutter</li> <li><code>LoginController</code>, <code>DashboardPage</code></li> </ul>"},{"location":"software/basics/basic_concepts/#optional-extensions","title":"Optional Extensions","text":"<p>If you're interested in a more complex architecture (like enterprise systems), you might also include:</p> <ul> <li>API Layer: For REST/GraphQL endpoints that expose services to clients.</li> <li>Integration Layer: Manages communication with external systems and services (e.g., third-party APIs).</li> <li>Security Layer: Handles authentication, authorization, and encryption across layers.</li> </ul>"},{"location":"software/basics/basic_concepts/#some-popular-software-applications","title":"Some Popular Software Applications","text":""},{"location":"software/basics/basic_concepts/#1-web-application","title":"1. Web Application","text":""},{"location":"software/basics/basic_concepts/#2-mobile-application","title":"2. Mobile Application","text":""},{"location":"software/basics/basic_concepts/#3-desktop-application","title":"3. Desktop Application","text":""},{"location":"software/basics/basic_concepts/#4-console-application","title":"4. Console Application","text":""},{"location":"software/basics/basic_concepts/#5-development-framework-library","title":"5. Development Framework, Library","text":""},{"location":"software/basics/basic_concepts/#6-development-tool","title":"6. Development Tool","text":""},{"location":"software/basics/basic_concepts/#7-extension","title":"7. Extension","text":""},{"location":"software/basics/basic_concepts/#8-platform","title":"8. Platform","text":""},{"location":"software/basics/basic_concepts/#9-ecosystem","title":"9. Ecosystem","text":""},{"location":"software/basics/basic_concepts/#10-some-codebase-for-research-learning-or-demo-purposes","title":"10. Some codebase for research, learning, or demo purposes","text":""},{"location":"software/basics/devlopment_concepts/","title":"Development Concepts","text":""},{"location":"software/basics/devlopment_concepts/#application-types-and-delivery-channels","title":"Application Types and Delivery Channels","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Core Logic           \u2502\n\u2502 (domain/use-cases/libs)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502\n        \u251c\u2500\u2500 Backend Services (FastAPI, Django, Flask, gRPC, Serverless)\n        \u2502     \u251c\u2500\u2500 API-only Service (REST/GraphQL/gRPC)\n        \u2502     \u251c\u2500\u2500 Background Jobs / Workers / Schedulers\n        \u2502     \u2514\u2500\u2500 BFF (Backend for Frontend)\n        \u2502\n        \u251c\u2500\u2500 Web Application\n        \u2502     \u251c\u2500\u2500 Browser-based UI (SPA/SSR; or Jupyter, MLflow)\n        \u2502     \u2514\u2500\u2500 Consumes Backend APIs\n        \u2502\n        \u251c\u2500\u2500 Mobile Application\n        \u2502     \u2514\u2500\u2500 iOS/Android app consuming Backend/BFF APIs\n        \u2502\n        \u251c\u2500\u2500 Desktop Application\n        \u2502     \u251c\u2500\u2500 Native GUI (PyQt/PySide6, wxPython, Tkinter)\n        \u2502     \u2514\u2500\u2500 Webview/Electron/Tauri-style\n        \u2502\n        \u251c\u2500\u2500 Command Line Application (CLI: click, typer, argparse)\n        \u2502\n        \u2514\u2500\u2500 Integrations / Services\n              \u251c\u2500\u2500 MCP Server\n              \u2514\u2500\u2500 External APIs, Messaging, etc.\n</code></pre>"},{"location":"software/basics/devlopment_concepts/#environments","title":"Environments","text":"<ul> <li> <p>Local: Your development machine (e.g., <code>&lt;your_name&gt;/dev</code> branch)</p> </li> <li> <p>Staging: A copy of production, used for testing (<code>dev</code> branch, or <code>staging</code> branch)</p> </li> <li> <p>Production: The live environment (<code>main</code> branch or <code>prod</code> branch)</p> </li> </ul>"},{"location":"software/basics/devlopment_concepts/#requirements","title":"Requirements","text":"<ul> <li>Business Requirement: A request for a new feature or change to an existing feature</li> <li>Technical Requirement: A request for a new feature or change to an existing feature</li> <li>System Requirement: A request for a new feature or change to an existing feature</li> <li>Code Requirement: A request for a new feature or change to an existing feature</li> </ul>"},{"location":"software/basics/devlopment_concepts/#development-roles","title":"Development Roles","text":"<ul> <li>Developer: Develop the code (front-end, back-end, machine learning enginer, data engineer, data scientist, data analyst, etc.)</li> <li>BA: Business Analyst</li> <li>QA: Quality Assurance</li> <li>DevOps: Deploy the code (DevOps, MLOps, LLMOps, System Administrator, etc.)</li> <li>Architect: Design the system</li> <li>PM: Project Manager</li> <li>PO: Product Owner</li> <li>Scrum Master: Scrum Master</li> <li>UX/UI Designer: Design the user interface</li> <li>Tech Lead: Lead the development team</li> </ul>"},{"location":"software/basics/devlopment_concepts/#development-actions","title":"Development Actions","text":"<ul> <li> <p>Develop: Develop the code</p> </li> <li> <p>Review: Code review process (2 approvals)</p> </li> <li> <p>Rewrite: Rewrite the code to improve the code quality</p> </li> <li> <p>Refactor: Refactor the code to improve the code structure</p> </li> <li> <p>Rebuild: Rebuild the code to improve the code performance</p> </li> <li> <p>Reproduce: Reproduce the error to fix it</p> </li> <li> <p>Test: Test the code to ensure it works as expected</p> </li> <li> <p>Deploy: Deploy the code to the production environment</p> </li> <li> <p>Release: Release the code to the production environment</p> </li> </ul>"},{"location":"software/basics/devlopment_concepts/#coding-workflow","title":"Coding Workflow","text":"<pre><code>Feature -&gt; Workflow -&gt; Data Models-&gt; Code Components -&gt; Develop -&gt; Unit Test -&gt; Code Review\n</code></pre>"},{"location":"software/basics/devlopment_concepts/#development-workflow","title":"Development Workflow","text":"<pre><code>            +--------------------------------+\n            |        Feature Request         |\n            |         (Jira Ticket)          |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            | Create `feature/*` from `dev`  |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |      Implement &amp; Unit Test     |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |         Pull Request           |\n            |   (feature/* -&gt; develop)       |\n            +---------------+----------------+\n                            |\n   +------------------------+---------------------------+\n   |                        |                           |\n   v                        v                           v\n+-----------------+  +----------------+  +----------------+\n|   Code Review   |  |   CI Checks    |  | Peer Feedback  |\n|  (2 Approvals)  |  | (Lint, Tests)  |  |                |\n+-----------------+  +----------------+  +----------------+\n   |                        |                           |\n   +------------------------+---------------------------+\n                            |\n                            v\n            +--------------------------------+\n            |      Merge to `develop`        |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |      Deploy to Staging         |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |     QA &amp; Acceptance Testing    |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |Create `release/*` from `develop`|\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |        Merge to `main`         |\n            |          &amp; Tag Release         |\n            +---------------+----------------+\n                            |\n                            v\n            +--------------------------------+\n            |       Deploy to Production     |\n            +--------------------------------+\n</code></pre>"},{"location":"software/basics/devlopment_concepts/#version-control","title":"Version Control","text":"<p>Semantic Versioning - <code>v1.2.3</code> means <code>Major.Minor.Patch</code>, where <code>Major</code> is when you make incompatible API changes, <code>Minor</code> is when you add functionality in a backwards-compatible manner, and <code>Patch</code> is when you make backwards-compatible bug fixes</p> <p>Version Control Workflow</p> <pre><code>Alpha -&gt; Beta -&gt; RC1 -&gt; RC2 -&gt; ... -&gt; RCn -&gt; Release\n</code></pre> <p><code>Alpha</code> is the initial version, <code>Beta</code> is the second version, <code>RC1</code> is the first release candidate, <code>RC2</code> is the second release candidate, and so on. <code>Release</code> is the final version.</p>"},{"location":"software/basics/devlopment_concepts/#testing","title":"Testing","text":"<ul> <li>Unit Testing: Testing individual units of code in isolation to ensure they function correctly.</li> <li>Functional Testing: Testing the code to ensure it performs its intended functions correctly.</li> <li>Non-Functional Testing: Testing the code to ensure it performs its intended functions correctly.</li> <li>Integration Testing: Testing how individual units or components interact with each other to ensure they work together properly. It focuses on verifying that different parts of the application integrate correctly and data flows appropriately between components.</li> <li>Stress Testing: Testing the code with high load to ensure it works as expected</li> <li>System Testing: Testing the entire system as a whole to ensure all components work together as expected</li> <li>Acceptance Testing: Testing performed to determine if the requirements of a specification or contract are met. It's the final verification before the software is delivered to the customer.</li> </ul>"},{"location":"software/basics/devlopment_concepts/#cicd","title":"CI/CD","text":"<ul> <li>CI: Continuous Integration</li> <li>CD: Continuous Deployment</li> </ul>"},{"location":"software/basics/devlopment_concepts/#resource-attributes","title":"Resource Attributes","text":"<p>Host System Information:</p> <ul> <li>Host Name: Machine hostname</li> <li>Host System: Operating system (Windows, macOS, Linux)</li> <li>Host Version: OS version details</li> <li>Host Processor: CPU architecture information</li> <li>Host Machine: Machine type identifier</li> </ul> <p>Performance Metrics:</p> <ul> <li>CPU Count: Number of available CPU cores</li> <li>CPU Percent: CPU utilization at trace start</li> <li>Memory Total: Total system memory</li> <li>Memory Available: Available system memory</li> <li>Memory Used: Currently used memory</li> <li>Memory Percent: Memory utilization percentage</li> </ul> <p>Dependencies:</p> <ul> <li>Imported Libraries: List of Python packages imported in your environment</li> </ul>"},{"location":"software/basics/devlopment_concepts/#implementation-patterns","title":"Implementation Patterns","text":"<p>1) Server-rendered backend (FastAPI/Flask + Jinja)</p> <ul> <li>Common names: Server-side rendering (SSR), Backend-rendered UI, Monolithic web app</li> <li>When to use: Simple flows, SEO-friendly pages, minimal interactivity, faster first paint</li> <li>Pros: Simple deploy, fewer moving parts, great SEO, no CORS concerns</li> <li>Cons: Limited rich interactivity, backend tightly coupled to UI</li> </ul> <p>2) Decoupled SPA + API (React/Vue + FastAPI)</p> <ul> <li>Common names: Decoupled architecture, Frontend\u2013backend separation, SPA + API, Headless backend</li> <li>When to use: Rich UX, complex state, team separation, mobile + web reuse</li> <li>Pros: Independent scaling/deploy, modern DX, reusable API</li> <li>Cons: More infra (CORS, versioning), SEO needs SSR/SSG, higher complexity</li> </ul>"},{"location":"software/basics/devlopment_concepts/#deployment-options","title":"Deployment Options","text":"<ul> <li>Two servers</li> <li>Example: React on Vercel; FastAPI on AWS EC2/Fly/Docker</li> <li>Single server (Reverse proxy)</li> <li>Nginx serves static build; proxies /api to FastAPI</li> <li>Unified dev/monorepo (local-first)</li> <li>One repo; dev servers for FE/BE; production still split or proxied</li> </ul>"},{"location":"software/basics/devlopment_concepts/#performance-bottleneck-classification","title":"Performance Bottleneck Classification","text":""},{"location":"software/basics/devlopment_concepts/#types-of-performance-limitations","title":"Types of Performance Limitations","text":"<ul> <li>CPU-bound: Tasks limited by computational power</li> <li>Characteristics: High CPU usage, low I/O wait, processor at/near 100%</li> <li>Examples: Complex calculations, data processing, rendering, compression</li> <li> <p>Solutions: Optimize algorithms, parallelize work, use compiled languages, scale vertically (more CPU power)</p> </li> <li> <p>Memory-bound: Tasks limited by memory capacity or bandwidth</p> </li> <li>Characteristics: High memory usage, swapping, garbage collection pauses</li> <li>Examples: Large data structures, caching, in-memory databases</li> <li> <p>Solutions: Optimize data structures, reduce memory footprint, memory profiling, vertical scaling (more RAM)</p> </li> <li> <p>I/O-bound: Tasks limited by input/output operations</p> </li> <li>Characteristics: Low CPU usage, high wait time, processes blocked on I/O</li> <li>Examples: Database queries, file operations, network requests, API calls</li> <li> <p>Solutions: Asynchronous I/O, connection pooling, caching, batching requests</p> </li> <li> <p>Network-bound: Tasks limited by network throughput or latency</p> </li> <li>Characteristics: Waiting on remote services, bandwidth saturation</li> <li>Examples: Downloading/uploading large files, microservice communication</li> <li> <p>Solutions: Compression, CDNs, edge computing, protocol optimization, connection reuse</p> </li> <li> <p>Disk-bound: Tasks limited by storage read/write speeds</p> </li> <li>Characteristics: High disk utilization, processes waiting on disk operations</li> <li>Examples: Database writes, log processing, file system operations</li> <li>Solutions: SSDs, RAID configurations, write batching, appropriate file systems</li> </ul>"},{"location":"software/basics/devlopment_concepts/#identifying-performance-bottlenecks","title":"Identifying Performance Bottlenecks","text":"<pre><code>Observe \u2192 Measure \u2192 Analyze \u2192 Optimize \u2192 Verify\n</code></pre> <ol> <li>Observation Tools:</li> <li>CPU: <code>top</code>, <code>htop</code>, <code>mpstat</code></li> <li>Memory: <code>free</code>, <code>vmstat</code></li> <li>I/O: <code>iostat</code>, <code>iotop</code></li> <li>Network: <code>netstat</code>, <code>iftop</code></li> <li> <p>Comprehensive: <code>dstat</code>, <code>glances</code></p> </li> <li> <p>Profiling Techniques:</p> </li> <li>Sampling profilers: Capture stack traces at intervals</li> <li>Tracing profilers: Instrument code to track execution</li> <li>Distributed tracing: Track requests across services (Jaeger, Zipkin)</li> <li> <p>Flame graphs: Visualize CPU/memory usage hierarchically</p> </li> <li> <p>Performance Testing:</p> </li> <li>Load testing: Simulate expected load (JMeter, Locust)</li> <li>Stress testing: Find breaking points</li> <li>Soak testing: Verify stability under sustained load</li> <li>Spike testing: Test response to sudden load increases</li> </ol>"},{"location":"software/basics/study_guide/","title":"Study Guide","text":""},{"location":"software/basics/study_guide/#how-to-start-with-coding-assistant","title":"How to start with Coding Assistant","text":""},{"location":"software/basics/study_guide/#project-kickoff","title":"Project kickoff","text":"<ol> <li> <p>I want to start a new project follow my {design_document}, What should I do first?</p> </li> <li> <p>What is the codebase structure? Give me step by step instructions to set up the project.</p> </li> <li> <p>Give me a template for the project.</p> </li> <li> <p>What exact commands do I run to set up the project on a fresh machine (OS, package manager, env vars)?</p> </li> <li> <p>What minimal Dockerfile and docker-compose should I use for local development?</p> </li> <li> <p>What branching strategy and commit message format should we follow? Provide examples.</p> </li> <li> <p>Which linters, formatters, and pre-commit hooks should we enforce and how to configure them?</p> </li> <li> <p>How should I configure local dev environment to mirror production (secrets, DB fixtures, sample data)?</p> </li> </ol>"},{"location":"software/basics/study_guide/#code-implementation","title":"Code Implementation","text":"<ol> <li> <p>Give me a plan to implement the project or implement the feature {feature_name}.</p> </li> <li> <p>Implement {functionality} in {language} with tests and inline comments \u2014 include edge cases.</p> </li> <li> <p>I see this error: {error_message} with stack trace {stack_trace} \u2014 how do I reproduce and fix it?</p> </li> <li> <p>Suggest monitoring, alerting thresholds, and runbook steps for common incidents.</p> </li> <li> <p>What logs/metrics/traces should I add to understand failures in {component}? Provide example log lines and metric names.</p> </li> </ol>"},{"location":"software/basics/study_guide/#code-review","title":"Code Review","text":"<ol> <li>Give me a checklist for PR review (security, tests, docs, performance).</li> </ol>"},{"location":"software/basics/study_guide/#cicd","title":"CI/CD","text":"<ol> <li>What CI/CD pipeline (GitHub Actions/GitLab/etc.) do you recommend \u2014 include YAML config and key steps.</li> </ol>"},{"location":"software/basics/study_guide/#docs-learning-collaboration","title":"Docs, learning &amp; collaboration","text":"<ol> <li>Write a short onboarding doc for new devs: setup, run, test, deploy.</li> <li>Explain {concept} (e.g., dependency injection, event sourcing) with code examples and analogies.</li> <li>Produce a changelog entry or release notes for this PR.</li> <li>Create API documentation (OpenAPI/Swagger) for the endpoints in this repo.</li> </ol>"},{"location":"software/basics/study_guide/#top-level-codebase-questions","title":"Top Level CodeBase Questions","text":"<ol> <li> <p>What is the overall purpose and functionality (features) of this codebase?</p> </li> <li> <p>What is the architecture and high-level structure of the codebase?</p> </li> <li> <p>What are the core modules/components and how do they interact?</p> </li> <li> <p>What are the entry points to the application?</p> </li> <li> <p>What technologies, frameworks, and languages are used?</p> </li> <li> <p>What are the coding standards and patterns used throughout the project?</p> </li> <li> <p>How is the project configured for different environments (development, testing, production)?</p> </li> <li> <p>How to run the codebase locally?</p> </li> <li> <p>What are the data models and how is data flowing through the system?</p> </li> <li> <p>Explain about the project's architecture and how it works</p> </li> <li> <p>Explain about the relationship between the code components in this sub-package</p> </li> <li> <p>How is the codebase tested and what is the test coverage?</p> </li> </ol>"},{"location":"software/basics/study_guide/#top-level-platform-questions","title":"Top Level Platform Questions","text":"<ol> <li> <p>What is the overall purpose and business value of the platform?</p> </li> <li> <p>What are the main components of the platform and what function does each serve?</p> </li> <li> <p>How do the different components communicate and integrate with each other?</p> </li> <li> <p>What are the dependencies between components and what is the deployment order?</p> </li> <li> <p>What are the entry points and interfaces for each component?</p> </li> <li> <p>How is authentication and authorization handled across the platform?</p> </li> <li> <p>What are the common failure points and how is resilience built into the system?</p> </li> <li> <p>How is the platform monitored and what observability tools are available?</p> </li> <li> <p>What is the deployment and scaling strategy for each component?</p> </li> <li> <p>How is data shared and synchronized across platform components?</p> </li> </ol>"},{"location":"software/basics/study_guide/#universal-learning-formula","title":"Universal Learning Formula","text":""},{"location":"software/basics/study_guide/#find-the-right-resources","title":"Find the Right Resources","text":"<p>To learn any new technology effectively, focus on these three key resources:</p> <ul> <li>Official Documentation: Builds a solid foundation by explaining concepts, features, and usage as intended by the creators.</li> <li>Example Codebases: Helps you see how others use the technology in real-world scenarios and exposes you to best practices.</li> <li>Open Source Implementations: Allows you to dive deeper into the internals, core concepts, and underlying patterns.</li> </ul>"},{"location":"software/basics/study_guide/#rapid-learning-framework","title":"Rapid Learning Framework","text":""},{"location":"software/basics/study_guide/#master-the-fundamentals-ask-coding-assisstant","title":"Master the Fundamentals =&gt; Ask Coding Assisstant","text":"<ul> <li>Grasp the core concepts before tackling advanced topics.</li> <li>Understand the problem the technology aims to solve.</li> <li>Learn essential mental models and paradigms (OOP, functional, reactive, etc.).</li> </ul>"},{"location":"software/basics/study_guide/#apply-the-8020-rule-ask-coding-assisstant","title":"Apply the 80/20 Rule =&gt;Ask Coding Assisstant","text":"<ul> <li>Focus on the 20% of features that deliver 80% of the value.</li> <li>Prioritize high-impact concepts: data structures, algorithms, and design patterns.</li> <li>Leave rare or edge-case features for later, when necessary.</li> </ul>"},{"location":"software/basics/study_guide/#build-projects-gradually","title":"Build Projects Gradually","text":"<ul> <li>Start small, using core features in simple projects.</li> <li>Increase project complexity as your confidence grows.</li> <li>Rebuild features from apps you admire to deepen understanding.</li> </ul>"},{"location":"software/basics/study_guide/#practice-with-intention","title":"Practice with Intention","text":"<ul> <li>Set clear learning goals with measurable outcomes.</li> <li>Use time management techniques like Pomodoro to stay focused.</li> <li>Regularly review and reinforce what you\u2019ve learned.</li> </ul>"},{"location":"software/basics/study_guide/#adopt-a-testing-mindset","title":"Adopt a Testing Mindset","text":"<ul> <li>Learn to write effective tests for your code.</li> <li>Understand testing frameworks and methodologies.</li> <li>Practice Test-Driven Development (TDD) when suitable.</li> </ul>"},{"location":"software/basics/study_guide/#leverage-documentation-wisely","title":"Leverage Documentation Wisely","text":"<ul> <li>Start with official tutorials and beginner guides.</li> <li>Use API references regularly during practice.</li> <li>Explore sections on architecture and design philosophy for deeper insights.</li> </ul>"},{"location":"software/basics/study_guide/#learn-from-the-community","title":"Learn from the community","text":"<ul> <li>Analyze open-source projects that use the technology</li> <li>Follow thought leaders and contributors on social media</li> <li>Participate in forums, Discord channels, and Stack Overflow</li> </ul>"},{"location":"software/basics/study_guide/#master-the-tooling-ecosystem","title":"Master the tooling ecosystem","text":"<ul> <li>Learn the build tools, package managers, and deployment pipelines</li> <li>Understand debugging and profiling tools</li> <li>Get comfortable with the IDE/editor features specific to the technology</li> </ul>"},{"location":"software/basics/study_guide/#maintain-a-learning-journal","title":"Maintain a learning journal","text":"<ul> <li>Document challenges, solutions, and insights</li> <li>Create cheat sheets for quick reference</li> <li>Build a personal knowledge base of patterns and anti-patterns</li> </ul>"},{"location":"software/basics/study_guide/#prepare-for-interviews-specifically","title":"Prepare for interviews specifically","text":"<ul> <li>Study common interview questions for the technology</li> <li>Practice explaining complex concepts in simple terms</li> <li>Prepare code samples demonstrating your proficiency</li> </ul>"},{"location":"software/basics/study_guide/#accelerated-learning-techniques","title":"Accelerated Learning Techniques","text":"<ul> <li>Spaced repetition: Review concepts at increasing intervals</li> <li>Teaching others: Explain concepts to reinforce your understanding</li> <li>Pair programming: Work with more experienced developers</li> <li>Code reviews: Have your code reviewed and review others' code</li> <li>Timeboxed exploration: Set a time limit for solving problems before seeking help</li> </ul>"},{"location":"software/basics/study_guide/#confidence-building-strategies","title":"Confidence-Building Strategies","text":"<ul> <li>Start contributing to open-source projects</li> <li>Build and deploy a complete application using the technology</li> <li>Create technical content (blog posts, videos) explaining concepts</li> <li>Participate in hackathons or coding competitions</li> <li>Conduct mock interviews with peers</li> </ul>"},{"location":"software/basics/study_guide/#measuring-progress","title":"Measuring Progress","text":"<ul> <li>Track the complexity of problems you can solve independently</li> <li>Monitor how quickly you can implement new features</li> <li>Note how often you need to reference documentation</li> <li>Gauge your ability to debug issues efficiently</li> <li>Assess how well you can explain the technology to others</li> </ul>"},{"location":"software/basics/study_guide/#additional-aspects","title":"Additional aspects","text":""},{"location":"software/basics/study_guide/#security-considerations","title":"Security Considerations","text":"<p>Neither the CodeBase nor Platform sections address security concerns specifically. You might want to add questions about:</p> <ul> <li>What are the security measures implemented in the codebase/platform?</li> <li>How are vulnerabilities identified and addressed?</li> <li>What is the process for security reviews and audits?</li> </ul>"},{"location":"software/basics/study_guide/#documentation-standards","title":"Documentation Standards","text":"<p>While coding standards are mentioned, documentation standards are equally important:</p> <ul> <li>How is the codebase/platform documented?</li> <li>What documentation tools and formats are used?</li> <li>Where can I find up-to-date documentation?</li> </ul>"},{"location":"software/basics/study_guide/#onboarding-process","title":"Onboarding Process","text":"<p>A section on onboarding could be valuable:</p> <ul> <li>What's the recommended path for new developers to get familiar with the codebase/platform?</li> <li>Are there any mentorship or buddy systems in place?</li> <li>What resources are available for newcomers?</li> </ul>"},{"location":"software/basics/study_guide/#troubleshooting-and-debugging","title":"Troubleshooting and Debugging","text":"<p>Consider adding specific questions about:</p> <ul> <li>What are common issues and their solutions?</li> <li>What debugging tools and techniques are recommended?</li> <li>Where to look for logs and how to interpret them?</li> </ul>"},{"location":"software/basics/study_guide/#performance-considerations","title":"Performance Considerations","text":"<p>Questions about:</p> <ul> <li>What are the performance bottlenecks?</li> <li>How is performance measured and monitored?</li> <li>What optimization techniques are used?</li> </ul>"},{"location":"software/basics/study_guide/#community-and-support","title":"Community and Support","text":"<p>While community learning is mentioned in the learning framework, you might want to add specific questions about:</p> <ul> <li>Where to get help when stuck?</li> <li>What are the active community channels?</li> <li>Who are the key maintainers or experts to follow? </li> </ul>"},{"location":"software/basics/study_guide/#version-control-and-collaboration","title":"Version Control and Collaboration","text":"<p>Consider adding questions about:</p> <ul> <li>What version control system is used and how?</li> <li>What is the branching strategy?</li> <li>How are code reviews conducted? </li> </ul>"},{"location":"software/basics/styles/","title":"My Software Style","text":""},{"location":"software/basics/styles/#my-favorite-folder-name","title":"My Favorite Folder Name","text":"<ul> <li><code>locch</code></li> <li><code>src</code>, <code>utils</code>, <code>tests</code>, <code>data</code></li> <li><code>docs</code>, <code>assets</code>, <code>pics</code>, <code>imgs</code>, <code>logs</code>, <code>models</code></li> <li><code>tmp</code>, <code>snap</code>, <code>notes</code>, <code>notebooks</code>, <code>misc</code></li> </ul> <p>My folder name style reflects the following qualities: - Intentional but Flexible Structure: I separate core logic, data, documentation, and experiments into clearly defined spaces while allowing room for exploration. - \u2728 Minimalistic and Meaningful: All names are short (1 word), lowercase, and to the point. If a single word doesn\u2019t express enough meaning, I prefer retro-style abbreviations \u2014 inspired by the 80s/90s developer habits \u2014 to preserve brevity and clarity.</p>"},{"location":"software/basics/styles/#core-code-logic","title":"\ud83d\udd27 Core Code &amp; Logic","text":"Name Meaning <code>src</code> Source code (standard) <code>lib</code> Reusable libraries/modules <code>bin</code> Executables / scripts <code>cfg</code> Configuration"},{"location":"software/basics/styles/#development-testing","title":"\ud83e\uddea Development &amp; Testing","text":"Name Meaning <code>tst</code> Tests <code>exp</code> Experiments <code>dbg</code> Debugging tools or logs <code>wrk</code> In-progress or WIP code"},{"location":"software/basics/styles/#documentation-support","title":"\ud83d\udcc1 Documentation &amp; Support","text":"Name Meaning <code>doc</code> Documentation <code>mds</code> Markdown files <code>ref</code> Reference materials <code>rsc</code> Resources (images, fonts...)"},{"location":"software/basics/styles/#notes-ideas","title":"\ud83e\udde0 Notes &amp; Ideas","text":"Name Meaning <code>ntx</code> Notes (text-based) <code>nbk</code> Notebooks (e.g., Jupyter) <code>ide</code> Ideas, drafts <code>sth</code> Scratch thoughts (raw notes)"},{"location":"software/basics/styles/#temporary-utility","title":"\ud83e\uddf9 Temporary / Utility","text":"Name Meaning <code>tmp</code> Temporary files <code>snx</code> Snapshots (like <code>snap</code>) <code>bak</code> Backups <code>zzz</code> Archived or deprecated"},{"location":"software/basics/styles/#data","title":"\ud83d\udcca Data","text":"Name Meaning <code>dat</code> Raw or processed data <code>csv</code> Tabular datasets <code>dbf</code> Flat DB-style files <code>mdl</code> Models or weights"},{"location":"software/basics/styles/#shortcodes","title":"\ud83e\udde9 Shortcodes","text":"<ul> <li><code>locch/</code> \u2014 your personal sandbox</li> <li><code>zsrc/</code> \u2014 experimental source code</li> <li><code>xnb/</code> \u2014 exploratory notebooks</li> </ul>"},{"location":"software/basics/styles/#my-favorite-file-name","title":"My Favorite File Name","text":"<p>I follow the same principles in file naming as I do with folders: short, purpose-driven, and easy to grep or autocomplete.</p> <ul> <li>Lowercase with underscores for readability: <code>data_loader.py</code>, <code>train_model.py</code></li> <li>Avoid spaces, camelCase, or vague names like <code>misc.py</code></li> <li>Prefix files for grouping, e.g., <code>utils_</code>, <code>cfg_</code>, <code>test_</code></li> </ul>"},{"location":"software/basics/styles/#my-favorite-code-component-name","title":"My Favorite Code Component Name","text":"<ul> <li>Functions do things \u2192 they should sound like actions (e.g., <code>load_data()</code>, <code>train_model()</code>) and must start with a verb</li> <li>Classes represent things \u2192 they should sound like objects or concepts (e.g., <code>DataLoader</code>, <code>SnapRunner</code>) and must start with a noun</li> <li>Constant must be UPPERCASE</li> </ul>"},{"location":"software/basics/styles/#code-conventions","title":"Code Conventions","text":"<ul> <li>Constants are in UPPERCASE</li> <li>Use snake_case for variable names</li> <li>Use camelCase for function names</li> <li>Use PascalCase for class names</li> <li>Use <code>_</code> at the start of a function name to annotate a internal function</li> <li>The Lenght of a line of code should be less than 88 characters</li> </ul>"},{"location":"software/tool_tip/database/","title":"Database Tool Tip","text":""},{"location":"software/tool_tip/database/#build-database","title":"Build Database","text":"<p>https://database.build/</p>"},{"location":"software/tool_tip/prompting/","title":"Prompting Tool Tip","text":""},{"location":"software/tool_tip/prompting/#review","title":"Review","text":"<ul> <li> <p>Let review this codbase/component/feature in strict mode =&gt; Be strict</p> </li> <li> <p>I don't think this codebase/component/feature works as expected, do you have any idea? =&gt; Make AI defend its answer</p> </li> </ul>"}]}